#!/bin/bash

LOGFILE=/var/log/minikube-startup.log
ERRFILE=/var/log/minikube-startup.err
exec > >(tee ${LOGFILE}) 2> >(tee ${ERRFILE} >&2)
set -Eeuxo pipefail

READY=/home/$user/README.minikube
BASE_DOMAIN=example.com
PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
USER=$(basename $(dirname $(ls -d1 /home/*/.kube | tail -1)))
export BASE_DOMAIN PRIVATE_IP PUBLIC_IP

function clean_exit {
    error_code=$?
    if [ "$error_code" == 0 ]; then
        echo """Docker and Kubernetes are running and available over the public IP
        address ${PUBLIC_IP}. To access this cluster from a remote machine:
        - Establish SSH access from that machine to ${user}@${PUBLIC_IP}.
        - Install an up-to-date version of the docker and kubectl clients.
        - Copy the TLS certificates and kubectl configuration:
            scp -r ${USER}@${PUBLIC_IP}:{.kube,.docker} ~
        - Set these environment variables to access Docker:
            export DOCKER_HOST=tcp://${PUBLIC_IP}:2376
            export DOCKER_TLS_VERIFY=1
          It is recommended to save these in your ~/.profile or equivalent.""" > $READY
    else
        echo """Minikube has not yet fully intialized.
        You can monitor progress by watching the logs:
           tail -f /var/log/minikube-startup.log
        This README will be updated with connection instructios
        once the initialization process is complete.""" > $READY
    fi
    chown $USER:$USER $ready
    exit $error_code
}
trap clean_exit EXIT ERR

function indent {
    sed "s@^@ ${1:-|} @"
}

function runcmd {
    if [ "$1" = "-i" ]; then local ifile=$2; local itype=' <'; shift 2; fi
    if [ "$1" = "-o" ]; then local ofile=$2; local otype=' >'; :>$2; shift 2; fi
    if [ "$1" = "-a" ]; then local ofile=$2; local otype=' >>'; shift 2; fi
    echo "$@""$itype$ifile""$otype$ofile" | indent '$'
    if [ "$ofile" ]; then
        { { if [ "$ifile" ]; then "$@" <$ifile; else "$@"; fi; } \
            >>$ofile 2>&3; } 3>&1 | indent ':'
    else
        { { { if [ "$ifile" ]; then "$@" <$ifile; else "$@"; fi; } \
            2>&3 | indent '|'; } 3>&1 1>&4 | indent '!'; } 4>&1
    fi
}

if [[ ! -f /root/.minikube/ca.crt || ! -f /root/.minikube/ca.key ]]; then
    runcmd mkdir -p /root/.minikube
    runcmd cp /etc/docker/ca.pem /root/.minikube/ca.crt
    runcmd openssl rsa -in /etc/docker/ca-key.pem -out /root/.minikube/ca.key
fi
export KUBECONFIG=$HOME/.kube/config.internal
runcmd minikube start --apiserver-ips="$PRIVATE_IP,$PUBLIC_IP" --wait=all
runcmd minikube status

echo
echo "Configuring CoreDNS: private_ip=$PRIVATE_IP, base_domain=$BASE_DOMAIN"
runcmd cd /root/.minikube/extra
runcmd -i coredns.tmpl -o coredns.yaml envsubst
runcmd kubectl replace -f coredns.new

echo
echo "Configuring Ingress DNS: public_ip=$PUBLIC_IP"
runcmd -i ingress-dns.tmpl -o ingress-dns.yaml envsubst
runcmd kubectl delete -f ingress-dns.yaml --ignore-not-found
runcmd kubectl create -f ingress-dns.yaml

echo "Updating config files"
cd /root/.kube
rm -rf cache
runcmd sed -i \
    -e "s@/root/.minikube/ca.crt@../.docker/ca.pem@" \
    -e "s@/root/.minikube/profiles/minikube/client.crt@../.docker/cert.pem@" \
    -e "s@/root/.minikube/profiles/minikube/client.key@../.docker/key.pem@" \
    config.internal
runcmd -i config.internal -o config sed -e "s@${private_ip}@${public_ip}@"
runcmd chmod 640 config*
